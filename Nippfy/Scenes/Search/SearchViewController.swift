//
//  SearchViewController.swift
//  Nippfy
//
//  Created by Manuel Salvador del Águila on 21/03/2020.
//  Copyright (c) 2020 Manuel Salvador del Águila. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchDisplayLogic: class
{
    func displaySomething(viewModel: Search.Something.ViewModel)
    func displayIsUserLoggedIn(viewModel: Search.IsUserLoggedIn.ViewModel)
}

class SearchViewController: UIViewController, SearchDisplayLogic
{
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
    
    let collectionCellID = "cellID"
    var myView = SearchView()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SearchInteractor()
        let presenter = SearchPresenter()
        let router = SearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        myView.searchBar.delegate = self
        prepareView()
        checkIfUserIsLoggedIn()
        doSomething()
    }
    
    func checkIfUserIsLoggedIn() {
        let request = Search.IsUserLoggedIn.Request()
        interactor?.checkIfUserIsLoggedIn(request: request)
    }
    
    func displayIsUserLoggedIn(viewModel: Search.IsUserLoggedIn.ViewModel) {
        let isLoggedIn = viewModel.isLoggedIn
        
        // Si no está logueado lo sacamos
        if (!isLoggedIn) {
            router?.routeToLogin()
        }
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = Search.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Search.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
}

// MARK: Prepare View
extension SearchViewController {
    
    func prepareView() {
        view = myView
        
        view.backgroundColor = UIColor(named: "Background")
        title = "Search"
        
        prepareNavBar()
        prepareButtons()
        setUpCollectionView()
    }
    
    func prepareNavBar() {
        navigationController?.navigationBar.prefersLargeTitles = true
        
        self.navigationController?.navigationBar.largeTitleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor(named: "Small Titles")]
        
        self.navigationController?.navigationBar.setBackgroundImage(UIImage(), for:.default)
        self.navigationController?.navigationBar.shadowImage = UIImage()
        self.navigationController?.navigationBar.layoutIfNeeded()
    }
    
    func prepareButtons() {
        myView.filterButton1.addTarget(self, action: #selector(filterButtonPressed(sender:)), for: .touchUpInside)
        myView.filterButton2.addTarget(self, action: #selector(filterButtonPressed(sender:)), for: .touchUpInside)
        myView.filterButton3.addTarget(self, action: #selector(filterButtonPressed(sender:)), for: .touchUpInside)
        myView.filterButton4.addTarget(self, action: #selector(filterButtonPressed(sender:)), for: .touchUpInside)
    }
}

extension SearchViewController: UISearchBarDelegate {
    
    func searchBarBookmarkButtonClicked(_ searchBar: UISearchBar) {
        print("BOOKMARK TAPPED")
        
        let isScrollViewHidden = myView.isScrollViewHidden
        
        myView.isScrollViewHidden = !isScrollViewHidden!
    }
}

// MARK: User Interactions

extension SearchViewController {
    
    @objc func filterButtonPressed(sender: UIButton) {
        print("PRESSED FILTER BUTTON")
        myView.toggleButton(button: sender)
    }
    
}

// MARK: Collection View Methods

extension SearchViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    
    func setUpCollectionView() {
        myView.collectionView.delegate = self
        myView.collectionView.dataSource = self
        myView.collectionView.keyboardDismissMode = .interactive
        myView.collectionView.alwaysBounceVertical = true
        myView.collectionView.contentInset = UIEdgeInsets(top: 8, left: 0, bottom: 8, right: 0)
        myView.collectionView.scrollIndicatorInsets = UIEdgeInsets(top: 8, left: 0, bottom: 0, right: 0)
        
        myView.collectionView.register(RestaurantCell.self, forCellWithReuseIdentifier: collectionCellID)
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 10
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: collectionCellID, for: indexPath) as! RestaurantCell
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        let deviceType = UIDevice.current.deviceType
        let width = myView.collectionView.frame.width
        
        // Small Devices
        if (deviceType == .iPhone4_4S || deviceType == .iPhones_5_5s_5c_SE || deviceType == .iPhones_6_6s_7_8) {
            return CGSize(width: width, height: 100)
        }
            // Large Devices
        else {
            return CGSize(width: width, height: 160)
        }
    }
    
    // Spacing between cells
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 12
    }
    
}
