//
//  RegisterWorker.swift
//  Nippfy
//
//  Created by Manuel Salvador del Águila on 29/02/2020.
//  Copyright (c) 2020 Manuel Salvador del Águila. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class RegisterWorker
{
    var repository = Repository.getInstance()
    
    func doSomeWork()
    {
    }
    
    func fetchStatesForCountry(request: Register.FetchStatesForCountry.Request, completionHandler: @escaping ((_ states: [State]) -> Void)) {
        
        let countryCode = request.countryCode
        
        repository.fetchJSONAccessToken {
            self.repository.fetchStatesForCountry(countryCode: countryCode) { (states) in
                completionHandler(states)
            }
        }
    }
    
    func registerNewUser(request: Register.RegisterNewUser.Request, completionHandler: @escaping ((_ error: Error?) -> Void)) {
        
        let user = request.userToRegister
        
        // 1. Registrar usuario
        repository.registerNewUser(request) { (error) in
            
            // Si existe error al registrar el usuario
            if let error = error {
                completionHandler(error)
                return
            } else {
                
                // 2. Si no hay error guardamos el usuario en la base de datos
                self.repository.saveUserToDatabase(user: user) { (error, userID) in
                    // Error al guardar el usuario en la base de datos
                    if let error = error {
                        completionHandler(error)
                        return
                    } else {
                        
                        // 3. Creamos el wallet del usuario
                        self.repository.createWalletForUser(forUserID: userID, amount: "0.00") { (error, walletID) in
                            if let error = error {
                                completionHandler(error)
                                return
                            } else {
                                
                                // 4. Actualizamos el wallet del usuario
                                self.repository.updateUserWalletID(forUserID: userID, withWalletID: walletID) { (error) in
                                    if let error = error {
                                        completionHandler(error)
                                    } else {
                                        completionHandler(nil)
                                    }
                                }
                                
                            }
                        }
                    }
                }
            }
            
        }
    }
}
