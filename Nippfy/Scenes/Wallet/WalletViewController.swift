//
//  WalletViewController.swift
//  Nippfy
//
//  Created by Manuel Salvador del Águila on 18/03/2020.
//  Copyright (c) 2020 Manuel Salvador del Águila. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Braintree
import BraintreeDropIn

protocol WalletDisplayLogic: class
{
    func displaySomething(viewModel: Wallet.Something.ViewModel)
}

class WalletViewController: UIViewController, WalletDisplayLogic, UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout
{
    var interactor: WalletBusinessLogic?
    var router: (NSObjectProtocol & WalletRoutingLogic & WalletDataPassing)?
    
    let blackView = UIView()
    let transactionsCellID = "transactionsID"
    
    let tokenationKey = Credentials().tokenizationKey
    var braintreeClient: BTAPIClient!
    
    var myView = WalletView()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = WalletInteractor()
        let presenter = WalletPresenter()
        let router = WalletRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        prepareView()
        doSomething()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    func doSomething()
    {
        let request = Wallet.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: Wallet.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
}

// MARK: Prepare View
extension WalletViewController {
    
    func prepareView() {
        view = myView
        
        view.backgroundColor = UIColor(named: "Background")
        title = "Wallet"
        
        prepareNavBar()
        setUpCollectionView()
        prepareButtonActions()
    }
    
    func prepareNavBar() {
        navigationController?.navigationBar.prefersLargeTitles = true
        
        self.navigationController?.navigationBar.largeTitleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor(named: "Small Titles")]
        
        self.navigationController?.navigationBar.setBackgroundImage(UIImage(), for:.default)
        self.navigationController?.navigationBar.shadowImage = UIImage()
        self.navigationController?.navigationBar.layoutIfNeeded()
        
        navigationItem.rightBarButtonItem = UIBarButtonItem(title: "Add", style: .plain, target: self, action: #selector(addButtonTapped))
        
        navigationItem.rightBarButtonItem?.setTitleTextAttributes([NSAttributedString.Key.font: UIFont.systemFont(ofSize: 20), .foregroundColor: UIColor(named: "Small Titles")], for: .normal)
        
        navigationItem.rightBarButtonItem?.setTitleTextAttributes([NSAttributedString.Key.font: UIFont.systemFont(ofSize: 20), .foregroundColor: UIColor(named: "Normal Words")], for: .selected)
    }
    
    func prepareButtonActions() {
        
        myView.lessButton.addTarget(self, action: #selector(lessButtonTapped), for: .touchUpInside)
        myView.plusButton.addTarget(self, action: #selector(plusButtonTapped), for: .touchUpInside)
        myView.addButton.addTarget(self, action: #selector(addToWalletButtonTapped), for: .touchUpInside)
        myView.cancelButton.addTarget(self, action: #selector(cancelButtonTapped), for: .touchUpInside)
    }
    
}

// MARK: User Interactions
extension WalletViewController {
    
    @objc func addButtonTapped() {
        print("ADD BUTTON TAPPED")
        
        myView.showMenu()
    }
    
    @objc func lessButtonTapped() {
        print("LESS BUTTON TAPPED")
        
    }
    
    @objc func plusButtonTapped() {
        print("PLUS BUTTON TAPPED")
        
    }
    
    @objc func addToWalletButtonTapped() {
        print("ADD TO WALLET BUTTON TAPPED")
        
        myView.closeMenu()
        
        showDropIn(clientTokenOrTokenizationKey: tokenationKey)
        
        /*
        // Example: Initialize BTAPIClient, if you haven't already
        braintreeClient = BTAPIClient(authorization: tokenationKey)
        let payPalDriver = BTPayPalDriver(apiClient: braintreeClient)
        payPalDriver.viewControllerPresentingDelegate = self
        payPalDriver.appSwitchDelegate = self // Optional
        
        // Specify the transaction amount here. "2.32" is used in this example.
        let request = BTPayPalRequest(amount: "2.32")
        request.currencyCode = "USD" // Optional; see BTPayPalRequest.h for more options
        
        payPalDriver.requestOneTimePayment(request) { (tokenizedPayPalAccount, error) in
            if let tokenizedPayPalAccount = tokenizedPayPalAccount {
                print("Got a nonce: \(tokenizedPayPalAccount.nonce)")
                
                // Access additional information
                let email = tokenizedPayPalAccount.email
                
                let firstName = tokenizedPayPalAccount.firstName
                let lastName = tokenizedPayPalAccount.lastName
                let phone = tokenizedPayPalAccount.phone
                
                print(email)
                print(firstName)
                print(lastName)
                
                // See BTPostalAddress.h for details
                let billingAddress = tokenizedPayPalAccount.billingAddress
                let shippingAddress = tokenizedPayPalAccount.shippingAddress
            } else if let error = error {
                // Handle error here...
            } else {
                // Buyer canceled payment approval
            }
        }
 */
        
    }
    
    
    @objc func cancelButtonTapped() {
        print("CANCEL BUTTON TAPPED")
        
        myView.closeMenu()
    }
    
}

// MARK: Collection View Methods

extension WalletViewController {
    
    func setUpCollectionView() {
        myView.transactionsCollectionView.delegate = self
        myView.transactionsCollectionView.dataSource = self
        myView.transactionsCollectionView.keyboardDismissMode = .interactive
        myView.transactionsCollectionView.alwaysBounceVertical = true
        myView.transactionsCollectionView.contentInset = UIEdgeInsets(top: 8, left: 0, bottom: 8, right: 0)
        myView.transactionsCollectionView.scrollIndicatorInsets = UIEdgeInsets(top: 8, left: 0, bottom: 0, right: 0)
        
        myView.transactionsCollectionView.register(TransactionCell.self, forCellWithReuseIdentifier: transactionsCellID)
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 10
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: transactionsCellID, for: indexPath) as! TransactionCell
        
        if indexPath.row % 2 == 0 {
            cell.isReceived = true
        } else {
            cell.isReceived = false
        }
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        let width = myView.transactionsCollectionView.frame.width
        
        return CGSize(width: width, height: 70)
    }
    
    // Spacing between cells
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 12
    }
    
}

// MARK: Show DropIn Menu for Payment
extension WalletViewController {
    
    
    
    func showDropIn(clientTokenOrTokenizationKey: String) {
        let request =  BTDropInRequest()
        request.cardDisabled = false
        request.paypalDisabled = false
        
        
        
        let paypalRequest = BTPayPalRequest(amount: "20")
        // paypalRequest.currencyCode = "USD"
        
        request.payPalRequest = paypalRequest
        
        
        let dropIn = BTDropInController(authorization: clientTokenOrTokenizationKey, request: request)
        { (controller, result, error) in
            if (error != nil) {
                print("ERROR")
            } else if (result?.isCancelled == true) {
                print("CANCELLED")
                // controller.dismiss(animated: true, completion: nil)
            } else if let result = result {
                
                print("Algun boton presionado")
                
                print(result.paymentDescription)
                print(result.paymentMethod)
                print(result.paymentOptionType.rawValue)
                
                // Use the BTDropInResult properties to update your UI
                // result.paymentOptionType
                // result.paymentMethod
                // result.paymentIcon
                // result.paymentDescription
            }
            controller.dismiss(animated: true, completion: nil)
        }
        self.present(dropIn!, animated: true, completion: nil)
    }
    
    
}

extension WalletViewController : BTViewControllerPresentingDelegate {
    
    func paymentDriver(_ driver: Any, requestsPresentationOf viewController: UIViewController) {
        present(viewController, animated: true, completion: nil)
    }
    
    func paymentDriver(_ driver: Any, requestsDismissalOf viewController: UIViewController) {
        viewController.dismiss(animated: true, completion: nil)
    }
}

extension WalletViewController : BTAppSwitchDelegate {
    
    func appSwitcherWillPerformAppSwitch(_ appSwitcher: Any) {
        
    }
    
    func appSwitcher(_ appSwitcher: Any, didPerformSwitchTo target: BTAppSwitchTarget) {
        
    }
    
    func appSwitcherWillProcessPaymentInfo(_ appSwitcher: Any) {
        
    }
    
}
