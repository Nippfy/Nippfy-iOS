//
//  WalletInteractor.swift
//  Nippfy
//
//  Created by Manuel Salvador del Águila on 18/03/2020.
//  Copyright (c) 2020 Manuel Salvador del Águila. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WalletBusinessLogic
{
    func doSomething(request: Wallet.Something.Request)
    func getBraintreeToken(request: Wallet.GetBraintreeToken.Request)
    func performTransaction(request: Wallet.PerformTransaction.Request)
}

protocol WalletDataStore
{
    //var name: String { get set }
}

class WalletInteractor: WalletBusinessLogic, WalletDataStore
{
    var presenter: WalletPresentationLogic?
    var worker: WalletWorker?
    //var name: String = ""
    
    // MARK: Do something
    
    func doSomething(request: Wallet.Something.Request)
    {
        worker = WalletWorker()
        worker?.doSomeWork()
        
        let response = Wallet.Something.Response()
        presenter?.presentSomething(response: response)
    }
    
    func getBraintreeToken(request: Wallet.GetBraintreeToken.Request) {
        worker = WalletWorker()
        worker?.getBraintreeToken(completionHandler: { [weak self] (error, braintreeToken) in
            
            let response = Wallet.GetBraintreeToken.Response(error: error, token: braintreeToken)
            self?.presenter?.presentBraintreeToken(response: response)
            
        })
    }
    
    func performTransaction(request: Wallet.PerformTransaction.Request) {
        worker = WalletWorker()
        worker?.performTransaction(request: request, completionHandler: { [weak self] (error) in
            let response = Wallet.PerformTransaction.Response(error: error)
            self?.presenter?.presentPerformTransaction(response: response)
        })
    }
}
