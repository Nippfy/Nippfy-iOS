//
//  WalletWorker.swift
//  Nippfy
//
//  Created by Manuel Salvador del Águila on 18/03/2020.
//  Copyright (c) 2020 Manuel Salvador del Águila. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class WalletWorker
{
    
    var repository = Repository.getInstance()
    
    func doSomeWork()
    {
    }
    
    public func getBraintreeToken(completionHandler:  @escaping ((_ error: Error? ,_ braintreeToken: String) -> Void)) {
        repository.getBraintreeToken { (error, braintreeToken) in
            completionHandler(error, braintreeToken)
        }
    }
    
    public func performTransaction(request: Wallet.PerformTransaction.Request, completionHandler: @escaping ((_ error: Error?, _ currentUser: CurrentUser?, _ userTransactions: [Transaction]?) -> Void)) {
        
        let nonce = request.nonce
        let amount = request.amount
        
        // 1. Make transaction with Braintree
        repository.performTransactionToWallet(nonce: nonce, amount: amount) { [weak self] (error, transaction) in
            if let error = error {
                completionHandler(error, nil, nil)
                return
            } else {
                print("Transaction Completed ")
                
                // 2. Save Transaction To Database
                guard let transaction = transaction else { return }
                self?.repository.saveTransactionToDatabase(transaction: transaction) { (error) in
                    
                    if let error = error {
                        completionHandler(error, nil, nil)
                        return
                    } else {
                        print("Transaction Saved To Database")
                        // 3. Update User Wallet and Nippfy Wallet in Database
                        self?.repository.addMoneyToUserAndNippfyWallet(transaction: transaction) { (error) in
                            if let error = error {
                                completionHandler(error, nil, nil)
                                return
                            }
                           
                            print("Money added to User and Nippfy Wallets")
                            // 4. Get Current User Information And Transactions
                            self?.repository.getCurrentUser { (currentUser) in
                                self?.repository.getTransactionsForUser(walletID: currentUser.wallet!.walletID) { (error, transactions) in
                                    
                                    if let error = error {
                                        completionHandler(error, nil, nil)
                                        return
                                    } else {
                                        print("User Transactions \(transactions!.count)")
                                        completionHandler(nil, currentUser, transactions!)
                                        
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    public func loadUserInformation(request: Wallet.LoadUserInformation.Request, completionHandler: @escaping(_ error: Error?, _ currentUser: CurrentUser?, _ userTransactions: [Transaction]?) -> Void) {
        repository.getCurrentUser { [weak self] (currentUser) in
            self?.repository.getTransactionsForUser(walletID: currentUser.wallet!.walletID) { (error, transactions) in
                
                if error != nil {
                    completionHandler(error, nil, nil)
                } else {
                    completionHandler(nil, currentUser, transactions)
                }
                
                
            }
        }
    }
}
